/* Generated by restful-react */

import React from "react";
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps,
} from "restful-react";

export const SPEC_VERSION = "0.1.0";
export interface AddressReadProcedureResponse {
  id: number;
  line1: string;
  line2: string;
  city: string;
  province: string;
  postcode: string;
  latitude: number;
  longitude: number;
  geohash: string;
  created_at: string;
}

export interface EntriesResponse {
  id: number;
  numberAvaliable: number;
  numberTotal: number;
  date: string;
  location: LocationsResponse;
  vaccine: number;
  inputType: number;
  tags_optional: string;
  tags_required: string;
  created_at: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface LocationsResponse {
  id: number;
  name: string;
  organization: string;
  phone: string;
  notes: string;
  address: AddressReadProcedureResponse;
  active: number;
  postcode: string;
  created_at: string;
}

export interface OrganizationsCreateProcedureRequest {
  full_name: string;
  short_name: string;
  description: string;
}

export interface OrganizationsReadProcedureResponse {
  id: number;
  full_name: string;
  short_name: string;
  description: string;
  created_at: string;
}

export interface ValidationError {
  loc: string[];
  msg: string;
  type: string;
}

export interface GetEntriesApiV1EntriesGetQueryParams {
  postalCode?: string;
}

export type GetEntriesApiV1EntriesGetProps = Omit<
  GetProps<
    EntriesResponse[],
    HTTPValidationError,
    GetEntriesApiV1EntriesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get Entries
 */
export const GetEntriesApiV1EntriesGet = (
  props: GetEntriesApiV1EntriesGetProps,
) => (
  <Get<
    EntriesResponse[],
    HTTPValidationError,
    GetEntriesApiV1EntriesGetQueryParams,
    void
  >
    path="/api/v1/entries/"
    {...props}
  />
);

export type UseGetEntriesApiV1EntriesGetProps = Omit<
  UseGetProps<
    EntriesResponse[],
    HTTPValidationError,
    GetEntriesApiV1EntriesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get Entries
 */
export const useGetEntriesApiV1EntriesGet = (
  props: UseGetEntriesApiV1EntriesGetProps,
) =>
  useGet<
    EntriesResponse[],
    HTTPValidationError,
    GetEntriesApiV1EntriesGetQueryParams,
    void
  >("/api/v1/entries/", props);

export interface GetEntryApiV1EntriesEntryIdGetPathParams {
  entry_id: number;
}

export type GetEntryApiV1EntriesEntryIdGetProps = Omit<
  GetProps<
    EntriesResponse,
    HTTPValidationError,
    void,
    GetEntryApiV1EntriesEntryIdGetPathParams
  >,
  "path"
> &
  GetEntryApiV1EntriesEntryIdGetPathParams;

/**
 * Get Entry
 */
export const GetEntryApiV1EntriesEntryIdGet = ({
  entry_id,
  ...props
}: GetEntryApiV1EntriesEntryIdGetProps) => (
  <Get<
    EntriesResponse,
    HTTPValidationError,
    void,
    GetEntryApiV1EntriesEntryIdGetPathParams
  >
    path={`/api/v1/entries/${entry_id}`}
    {...props}
  />
);

export type UseGetEntryApiV1EntriesEntryIdGetProps = Omit<
  UseGetProps<
    EntriesResponse,
    HTTPValidationError,
    void,
    GetEntryApiV1EntriesEntryIdGetPathParams
  >,
  "path"
> &
  GetEntryApiV1EntriesEntryIdGetPathParams;

/**
 * Get Entry
 */
export const useGetEntryApiV1EntriesEntryIdGet = ({
  entry_id,
  ...props
}: UseGetEntryApiV1EntriesEntryIdGetProps) =>
  useGet<
    EntriesResponse,
    HTTPValidationError,
    void,
    GetEntryApiV1EntriesEntryIdGetPathParams
  >(
    (paramsInPath: GetEntryApiV1EntriesEntryIdGetPathParams) =>
      `/api/v1/entries/${paramsInPath.entry_id}`,
    { pathParams: { entry_id }, ...props },
  );

export interface GetLocationsApiV1LocationsGetQueryParams {
  postalCode?: string;
}

export type GetLocationsApiV1LocationsGetProps = Omit<
  GetProps<
    LocationsResponse[],
    HTTPValidationError,
    GetLocationsApiV1LocationsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get Locations
 */
export const GetLocationsApiV1LocationsGet = (
  props: GetLocationsApiV1LocationsGetProps,
) => (
  <Get<
    LocationsResponse[],
    HTTPValidationError,
    GetLocationsApiV1LocationsGetQueryParams,
    void
  >
    path="/api/v1/locations/"
    {...props}
  />
);

export type UseGetLocationsApiV1LocationsGetProps = Omit<
  UseGetProps<
    LocationsResponse[],
    HTTPValidationError,
    GetLocationsApiV1LocationsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get Locations
 */
export const useGetLocationsApiV1LocationsGet = (
  props: UseGetLocationsApiV1LocationsGetProps,
) =>
  useGet<
    LocationsResponse[],
    HTTPValidationError,
    GetLocationsApiV1LocationsGetQueryParams,
    void
  >("/api/v1/locations/", props);

export interface GetLocationApiV1LocationsLocationIdGetPathParams {
  location_id: number;
}

export type GetLocationApiV1LocationsLocationIdGetProps = Omit<
  GetProps<
    LocationsResponse,
    HTTPValidationError,
    void,
    GetLocationApiV1LocationsLocationIdGetPathParams
  >,
  "path"
> &
  GetLocationApiV1LocationsLocationIdGetPathParams;

/**
 * Get Location
 */
export const GetLocationApiV1LocationsLocationIdGet = ({
  location_id,
  ...props
}: GetLocationApiV1LocationsLocationIdGetProps) => (
  <Get<
    LocationsResponse,
    HTTPValidationError,
    void,
    GetLocationApiV1LocationsLocationIdGetPathParams
  >
    path={`/api/v1/locations/${location_id}`}
    {...props}
  />
);

export type UseGetLocationApiV1LocationsLocationIdGetProps = Omit<
  UseGetProps<
    LocationsResponse,
    HTTPValidationError,
    void,
    GetLocationApiV1LocationsLocationIdGetPathParams
  >,
  "path"
> &
  GetLocationApiV1LocationsLocationIdGetPathParams;

/**
 * Get Location
 */
export const useGetLocationApiV1LocationsLocationIdGet = ({
  location_id,
  ...props
}: UseGetLocationApiV1LocationsLocationIdGetProps) =>
  useGet<
    LocationsResponse,
    HTTPValidationError,
    void,
    GetLocationApiV1LocationsLocationIdGetPathParams
  >(
    (paramsInPath: GetLocationApiV1LocationsLocationIdGetPathParams) =>
      `/api/v1/locations/${paramsInPath.location_id}`,
    { pathParams: { location_id }, ...props },
  );

export interface GetOrganizationsApiV1OrganizationsGetQueryParams {
  name?: string;
}

export type GetOrganizationsApiV1OrganizationsGetProps = Omit<
  GetProps<
    OrganizationsReadProcedureResponse[],
    HTTPValidationError,
    GetOrganizationsApiV1OrganizationsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get Organizations
 */
export const GetOrganizationsApiV1OrganizationsGet = (
  props: GetOrganizationsApiV1OrganizationsGetProps,
) => (
  <Get<
    OrganizationsReadProcedureResponse[],
    HTTPValidationError,
    GetOrganizationsApiV1OrganizationsGetQueryParams,
    void
  >
    path="/api/v1/organizations/"
    {...props}
  />
);

export type UseGetOrganizationsApiV1OrganizationsGetProps = Omit<
  UseGetProps<
    OrganizationsReadProcedureResponse[],
    HTTPValidationError,
    GetOrganizationsApiV1OrganizationsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get Organizations
 */
export const useGetOrganizationsApiV1OrganizationsGet = (
  props: UseGetOrganizationsApiV1OrganizationsGetProps,
) =>
  useGet<
    OrganizationsReadProcedureResponse[],
    HTTPValidationError,
    GetOrganizationsApiV1OrganizationsGetQueryParams,
    void
  >("/api/v1/organizations/", props);

export type CreateOrganizationApiV1OrganizationsPostProps = Omit<
  MutateProps<
    OrganizationsReadProcedureResponse,
    HTTPValidationError,
    void,
    OrganizationsCreateProcedureRequest,
    void
  >,
  "path" | "verb"
>;

/**
 * Create Organization
 */
export const CreateOrganizationApiV1OrganizationsPost = (
  props: CreateOrganizationApiV1OrganizationsPostProps,
) => (
  <Mutate<
    OrganizationsReadProcedureResponse,
    HTTPValidationError,
    void,
    OrganizationsCreateProcedureRequest,
    void
  >
    verb="POST"
    path="/api/v1/organizations/"
    {...props}
  />
);

export type UseCreateOrganizationApiV1OrganizationsPostProps = Omit<
  UseMutateProps<
    OrganizationsReadProcedureResponse,
    HTTPValidationError,
    void,
    OrganizationsCreateProcedureRequest,
    void
  >,
  "path" | "verb"
>;

/**
 * Create Organization
 */
export const useCreateOrganizationApiV1OrganizationsPost = (
  props: UseCreateOrganizationApiV1OrganizationsPostProps,
) =>
  useMutate<
    OrganizationsReadProcedureResponse,
    HTTPValidationError,
    void,
    OrganizationsCreateProcedureRequest,
    void
  >("POST", "/api/v1/organizations/", props);

export interface GetOrganizationApiV1OrganizationsOrganizationIdGetPathParams {
  organization_id: number;
}

export type GetOrganizationApiV1OrganizationsOrganizationIdGetProps = Omit<
  GetProps<
    OrganizationsReadProcedureResponse,
    HTTPValidationError,
    void,
    GetOrganizationApiV1OrganizationsOrganizationIdGetPathParams
  >,
  "path"
> &
  GetOrganizationApiV1OrganizationsOrganizationIdGetPathParams;

/**
 * Get Organization
 */
export const GetOrganizationApiV1OrganizationsOrganizationIdGet = ({
  organization_id,
  ...props
}: GetOrganizationApiV1OrganizationsOrganizationIdGetProps) => (
  <Get<
    OrganizationsReadProcedureResponse,
    HTTPValidationError,
    void,
    GetOrganizationApiV1OrganizationsOrganizationIdGetPathParams
  >
    path={`/api/v1/organizations/${organization_id}`}
    {...props}
  />
);

export type UseGetOrganizationApiV1OrganizationsOrganizationIdGetProps = Omit<
  UseGetProps<
    OrganizationsReadProcedureResponse,
    HTTPValidationError,
    void,
    GetOrganizationApiV1OrganizationsOrganizationIdGetPathParams
  >,
  "path"
> &
  GetOrganizationApiV1OrganizationsOrganizationIdGetPathParams;

/**
 * Get Organization
 */
export const useGetOrganizationApiV1OrganizationsOrganizationIdGet = ({
  organization_id,
  ...props
}: UseGetOrganizationApiV1OrganizationsOrganizationIdGetProps) =>
  useGet<
    OrganizationsReadProcedureResponse,
    HTTPValidationError,
    void,
    GetOrganizationApiV1OrganizationsOrganizationIdGetPathParams
  >(
    (
      paramsInPath: GetOrganizationApiV1OrganizationsOrganizationIdGetPathParams,
    ) => `/api/v1/organizations/${paramsInPath.organization_id}`,
    { pathParams: { organization_id }, ...props },
  );

export interface GetAddressesApiV1AddressesGetQueryParams {
  postalCode?: string;
}

export type GetAddressesApiV1AddressesGetProps = Omit<
  GetProps<
    AddressReadProcedureResponse[],
    HTTPValidationError,
    GetAddressesApiV1AddressesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get Addresses
 */
export const GetAddressesApiV1AddressesGet = (
  props: GetAddressesApiV1AddressesGetProps,
) => (
  <Get<
    AddressReadProcedureResponse[],
    HTTPValidationError,
    GetAddressesApiV1AddressesGetQueryParams,
    void
  >
    path="/api/v1/addresses/"
    {...props}
  />
);

export type UseGetAddressesApiV1AddressesGetProps = Omit<
  UseGetProps<
    AddressReadProcedureResponse[],
    HTTPValidationError,
    GetAddressesApiV1AddressesGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Get Addresses
 */
export const useGetAddressesApiV1AddressesGet = (
  props: UseGetAddressesApiV1AddressesGetProps,
) =>
  useGet<
    AddressReadProcedureResponse[],
    HTTPValidationError,
    GetAddressesApiV1AddressesGetQueryParams,
    void
  >("/api/v1/addresses/", props);

export interface GetAddressApiV1AddressesAddressIdGetPathParams {
  address_id: number;
}

export type GetAddressApiV1AddressesAddressIdGetProps = Omit<
  GetProps<
    AddressReadProcedureResponse,
    HTTPValidationError,
    void,
    GetAddressApiV1AddressesAddressIdGetPathParams
  >,
  "path"
> &
  GetAddressApiV1AddressesAddressIdGetPathParams;

/**
 * Get Address
 */
export const GetAddressApiV1AddressesAddressIdGet = ({
  address_id,
  ...props
}: GetAddressApiV1AddressesAddressIdGetProps) => (
  <Get<
    AddressReadProcedureResponse,
    HTTPValidationError,
    void,
    GetAddressApiV1AddressesAddressIdGetPathParams
  >
    path={`/api/v1/addresses/${address_id}`}
    {...props}
  />
);

export type UseGetAddressApiV1AddressesAddressIdGetProps = Omit<
  UseGetProps<
    AddressReadProcedureResponse,
    HTTPValidationError,
    void,
    GetAddressApiV1AddressesAddressIdGetPathParams
  >,
  "path"
> &
  GetAddressApiV1AddressesAddressIdGetPathParams;

/**
 * Get Address
 */
export const useGetAddressApiV1AddressesAddressIdGet = ({
  address_id,
  ...props
}: UseGetAddressApiV1AddressesAddressIdGetProps) =>
  useGet<
    AddressReadProcedureResponse,
    HTTPValidationError,
    void,
    GetAddressApiV1AddressesAddressIdGetPathParams
  >(
    (paramsInPath: GetAddressApiV1AddressesAddressIdGetPathParams) =>
      `/api/v1/addresses/${paramsInPath.address_id}`,
    { pathParams: { address_id }, ...props },
  );
