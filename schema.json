{
  "openapi": "3.0.2",
  "info": {
    "title": "ðŸ’‰ðŸ” VaxFinder",
    "description": "RESTful APIs for VaxFinder.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/alvintangz/VaxFinder/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "Vaccine Availability",
      "description": "Operations about vaccine availability. _Vaccine availability should include a certain date and location._"
    },
    {
      "name": "Locations",
      "description": "Operations about locations. _Each location should correspond to a place where vaccine shots are administered._"
    },
    {
      "name": "Addresses",
      "description": "Operations about addresses. _A location has a one-to-one relationship with an address._"
    },
    {
      "name": "Organizations",
      "description": "Operations about organizations. _Each organization is responsible for administering vaccines._"
    },
    {
      "name": "Requirements",
      "description": "Operations about eligibility requirements. _An eligibility requirement must be met in order for one to receive a vaccine._"
    }
  ],
  "paths": {
    "/api/v1/vaccine-availability": {
      "get": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "List Vaccine Availability",
        "description": "**Retrieves the list of vaccine availabilities within the vicinity of a\n`postal_code` and after the `min_date`.**",
        "operationId": "list_vaccine_availability_api_v1_vaccine_availability_get",
        "parameters": [
          {
            "name": "min_date",
            "in": "query",
            "description": "**Search for vaccine availabilities after a certain date and time (UTC)**. The default value is the current date and time (UTC).<br/><br/>Valid example(s): *2021-05-05T21:59:02.961804+00:00*",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Minimum Date",
              "type": "string",
              "description": "**Search for vaccine availabilities after a certain date and time (UTC)**. The default value is the current date and time (UTC).<br/><br/>Valid example(s): *2021-05-05T21:59:02.961804+00:00*",
              "format": "date-time"
            }
          },
          {
            "name": "postal_code",
            "in": "query",
            "description": "**Search for vaccine availabilities within the vicinity of a postal code.**<br/><br/>Valid example(s): *K1A; K1A0; K1A0k; K1A0K9*",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "title": "Postal Code",
              "maxLength": 6,
              "minLength": 3,
              "type": "string",
              "description": "**Search for vaccine availabilities within the vicinity of a postal code.**<br/><br/>Valid example(s): *K1A; K1A0; K1A0k; K1A0K9*"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Vaccine Availability Api V1 Vaccine Availability Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaccineAvailabilityExpandedResponse"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "Create Vaccine Availability",
        "description": "**Creates a new vaccine availability with the entity enclosed in the\nrequest body.** On success, the new vaccine availability is returned in the\nbody of the response.",
        "operationId": "create_vaccine_availability_api_v1_vaccine_availability_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaccineAvailabilityCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaccineAvailabilityResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/vaccine-availability/{vaccine_availability_id}": {
      "get": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "Retrieve Vaccine Availability By Id",
        "description": "**Retrieves a vaccine availability with the id from the\n`vaccine_availability_id` path parameter.**",
        "operationId": "retrieve_vaccine_availability_by_id_api_v1_vaccine_availability__vaccine_availability_id__get",
        "parameters": [
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaccineAvailabilityExpandedResponse"
                }
              }
            }
          },
          "404": {
            "description": "The vaccine availability with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "Update Vaccine Availability",
        "description": "**Updates a vaccine availability with the id from the\n`vaccine_availability_id` path parameter with the entity enclosed in the\nrequest body.** On success, the updated vaccine availability is returned in\nthe body of the response.",
        "operationId": "update_vaccine_availability_api_v1_vaccine_availability__vaccine_availability_id__put",
        "parameters": [
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaccineAvailabilityUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaccineAvailabilityResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The vaccine availability with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "Delete Vaccine Availability By Id",
        "description": "**Deletes a vaccine availability with the id from the\n`vaccine_availability_id` path parameter.**",
        "operationId": "delete_vaccine_availability_by_id_api_v1_vaccine_availability__vaccine_availability_id__delete",
        "parameters": [
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The vaccine availability with the specified id has been successfully deleted."
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The vaccine availability with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/vaccine-availability/{vaccine_availability_id}/timeslots": {
      "get": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "List Timeslots For Vaccine Availability By Id",
        "description": "**Retrieves the list of timeslots for a vaccine availability. This\nvaccine availability has an ID of `vaccine_availability_id` from the\npath.**",
        "operationId": "list_timeslots_for_vaccine_availability_by_id_api_v1_vaccine_availability__vaccine_availability_id__timeslots_get",
        "parameters": [
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "description": "Timeslots for a vaccine availability with this id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "string",
              "description": "Timeslots for a vaccine availability with this id.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Timeslots For Vaccine Availability By Id Api V1 Vaccine Availability  Vaccine Availability Id  Timeslots Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaccineAvailabilityTimeslotResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The vaccine availability with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "Create Timeslot For Vaccine Availability By Id",
        "description": "**Creates a new timeslot for a vaccine availability with the entity\nenclosed in the request body. This vaccine availability has an ID of\n`vaccine_availability_id` from the path.** On success, the new timeslot is\nreturned in the body of the response.",
        "operationId": "create_timeslot_for_vaccine_availability_by_id_api_v1_vaccine_availability__vaccine_availability_id__timeslots_post",
        "parameters": [
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "description": "Timeslot for a vaccine availability with this id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "string",
              "description": "Timeslot for a vaccine availability with this id.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaccineAvailabilityTimeslotCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaccineAvailabilityTimeslotResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/vaccine-availability/{vaccine_availability_id}/timeslots/{timeslot_id}": {
      "put": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "Update Timeslot For Vaccine Availability By Id",
        "description": "**Updates a timeslot with the id from the `timeslot_id` path parameter\nwith the entity enclosed in the request body. The timeslot must be\nfor a vaccine availability that has an ID of `vaccine_availability_id`\nfrom the path.** On success, the updated timeslot is returned in the body\nof the response.",
        "operationId": "update_timeslot_for_vaccine_availability_by_id_api_v1_vaccine_availability__vaccine_availability_id__timeslots__timeslot_id__put",
        "parameters": [
          {
            "name": "timeslot_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Timeslot Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "description": "Timeslot for a vaccine availability with this id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "string",
              "description": "Timeslot for a vaccine availability with this id.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaccineAvailabilityTimeslotUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaccineAvailabilityTimeslotResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The vaccine availability with the id from the `vaccine_availability_id` path parameter or the timeslot with the id from the `timeslot_id` path parameter could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/vaccine-availability/{vaccine_availability_id}/requirements": {
      "get": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "List Requirements For Vaccine Availability By Id",
        "description": "**Retrieves the list of requirements for a vaccine availability. This\nvaccine availability has an ID of `vaccine_availability_id` from the\npath.**",
        "operationId": "list_requirements_for_vaccine_availability_by_id_api_v1_vaccine_availability__vaccine_availability_id__requirements_get",
        "parameters": [
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "description": "Requirements for a vaccine availability with this id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "string",
              "description": "Requirements for a vaccine availability with this id.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Requirements For Vaccine Availability By Id Api V1 Vaccine Availability  Vaccine Availability Id  Requirements Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaccineAvailabilityRequirementsResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The vaccine availability with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "Create Requirement For Vaccine Availability By Id",
        "description": "**Creates a new requirements for a vaccine availability with the entity\nenclosed in the request body. This vaccine availability has an ID of\n`vaccine_availability_id` from the path.** On success, the new timeslot is\nreturned in the body of the response.",
        "operationId": "create_requirement_for_vaccine_availability_by_id_api_v1_vaccine_availability__vaccine_availability_id__requirements_post",
        "parameters": [
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "description": "Requirement for a vaccine availability with this id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "string",
              "description": "Requirement for a vaccine availability with this id.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaccineAvailabilityRequirementsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaccineAvailabilityRequirementsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/vaccine-availability/{vaccine_availability_id}/requirements/{requirement_id}": {
      "put": {
        "tags": [
          "Vaccine Availability"
        ],
        "summary": "Update Requirement For Vaccine Availability By Id",
        "description": "**Updates a requirement with the id from the `requirement_id` path\nparameter with the entity enclosed in the request body. The requirement\nmust be for a vaccine availability that has an ID of\n`vaccine_availability_id` from the path.** On success, the updated\nrequirement is returned in the body of the response.",
        "operationId": "update_requirement_for_vaccine_availability_by_id_api_v1_vaccine_availability__vaccine_availability_id__requirements__requirement_id__put",
        "parameters": [
          {
            "name": "requirement_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Requirement Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vaccine_availability_id",
            "in": "path",
            "description": "Requirement for a vaccine availability with this id.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Vaccine Availability Id",
              "type": "string",
              "description": "Requirement for a vaccine availability with this id.",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaccineAvailabilityRequirementsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaccineAvailabilityRequirementsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The vaccine availability with the id from the `vaccine_availability_id` path parameter or the requirement with the id from the `requirement_id` path parameter could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "List Locations",
        "description": "**Retrieves the list of locations.**",
        "operationId": "list_locations_api_v1_locations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Locations Api V1 Locations Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationExpandedResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Create Location",
        "description": "**Creates a new location with the entity enclosed in the request body.** On\nsuccess, the new location is returned in the body of the response.",
        "operationId": "create_location_api_v1_locations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/locations/{location_id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Retrieve Location By Id",
        "description": "**Retrieves a location with the id from the `location_id` path\nparameter.**",
        "operationId": "retrieve_location_by_id_api_v1_locations__location_id__get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Location Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationExpandedResponse"
                }
              }
            }
          },
          "404": {
            "description": "The location with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "Update Location",
        "description": "**Updates a location with the id from the `location_id` path parameter\nwith the entity enclosed in the request body.** On success, the updated\nlocation is returned in the body of the response.",
        "operationId": "update_location_api_v1_locations__location_id__put",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Location Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The location with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "Delete Location By Id",
        "description": "**Deletes a location with the id from the `location_id` path parameter.**",
        "operationId": "delete_location_by_id_api_v1_locations__location_id__delete",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Location Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The location with the specified id has been successfully deleted."
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The location with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "List Organizations",
        "description": "**Retrieves the list of organizations.**",
        "operationId": "list_organizations_api_v1_organizations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Organizations Api V1 Organizations Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create Organization",
        "description": "**Creates a new organization with the entity enclosed in the request\nbody.** On success, the new organization is returned in the body of the\nresponse.",
        "operationId": "create_organization_api_v1_organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/organizations/{organization_id}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Retrieve Organization By Id",
        "description": "**Retrieves an organization with the id from the `organization_id` path\nparameter.**",
        "operationId": "retrieve_organization_by_id_api_v1_organizations__organization_id__get",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Organization Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "404": {
            "description": "The organization with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update Organization",
        "description": "**Updates an organization with the id from the `organization_id` path\nparameter with the entity enclosed in the request body.** On success,\nthe updated organization is returned in the body of the response.",
        "operationId": "update_organization_api_v1_organizations__organization_id__put",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Organization Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The organization with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete Organization By Id",
        "description": "**Deletes an organization with the id from the `organization_id` path\nparameter.**",
        "operationId": "delete_organization_by_id_api_v1_organizations__organization_id__delete",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Organization Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The organization with the specified id has been successfully deleted."
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The organization with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "List Addresses",
        "description": "**Retrieves the list of addresses.**",
        "operationId": "list_addresses_api_v1_addresses_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Addresses Api V1 Addresses Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Create Address",
        "description": "**Creates a new address with the entity enclosed in the request body.** On\nsuccess, the new address is returned in the body of the response.",
        "operationId": "create_address_api_v1_addresses_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/addresses/{address_id}": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Retrieve Address By Id",
        "description": "**Retrieves an address with the id from the `address_id` path parameter.**",
        "operationId": "retrieve_address_by_id_api_v1_addresses__address_id__get",
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Address Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResponse"
                }
              }
            }
          },
          "404": {
            "description": "The address with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Addresses"
        ],
        "summary": "Update Address",
        "description": "**Updates an address with the id from the `address_id` path parameter with\nthe entity enclosed in the request body.** On success, the updated address\nis returned in the body of the response.",
        "operationId": "update_address_api_v1_addresses__address_id__put",
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Address Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The location with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Addresses"
        ],
        "summary": "Delete Address By Id",
        "description": "**Deletes an address with the id from the `address_id` path parameter.**",
        "operationId": "delete_address_by_id_api_v1_addresses__address_id__delete",
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Address Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The address with the specified id has been successfully deleted."
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The address with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/requirements": {
      "get": {
        "tags": [
          "Requirements"
        ],
        "summary": "List Requirements",
        "description": "**Retrieves the list of requirements.**",
        "operationId": "list_requirements_api_v1_requirements_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Requirements Api V1 Requirements Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequirementResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Requirements"
        ],
        "summary": "Create Requirement",
        "description": "**Creates a new requirement with the entity enclosed in the request\nbody.** On success, the new requirement is returned in the body of the\nresponse.",
        "operationId": "create_requirement_api_v1_requirements_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequirementResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/requirements/{requirement_id}": {
      "get": {
        "tags": [
          "Requirements"
        ],
        "summary": "Retrieve Requirement By Id",
        "description": "**Retrieves a requirement with the id from the `requirement_id` path\nparameter.**",
        "operationId": "retrieve_requirement_by_id_api_v1_requirements__requirement_id__get",
        "parameters": [
          {
            "name": "requirement_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Requirement Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequirementResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requirement with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Requirements"
        ],
        "summary": "Update Requirement",
        "description": "**Updates a requirement with the id from the `requirement_id` path\nparameter with the entity enclosed in the request body.** On success,\nthe updated requirement is returned in the body of the response.",
        "operationId": "update_requirement_api_v1_requirements__requirement_id__put",
        "parameters": [
          {
            "name": "requirement_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Requirement Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequirementsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequirementResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The location with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Requirements"
        ],
        "summary": "Delete Requirement By Id",
        "description": "**Deletes a requirement with the id from the `requirement_id` path\nparameter.**",
        "operationId": "delete_requirement_by_id_api_v1_requirements__requirement_id__delete",
        "parameters": [
          {
            "name": "requirement_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "title": "Requirement Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The requirement with the specified id has been successfully deleted."
          },
          "401": {
            "description": "Invalid credentials."
          },
          "403": {
            "description": "Invalid permissions or credentials."
          },
          "404": {
            "description": "The requirement with the specified id could not be found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddressCreateRequest": {
        "title": "AddressCreateRequest",
        "required": [
          "postcode",
          "province"
        ],
        "type": "object",
        "properties": {
          "line1": {
            "title": "Line1",
            "type": "string"
          },
          "line2": {
            "title": "Line2",
            "type": "string"
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "province": {
            "title": "Province",
            "type": "string"
          },
          "postcode": {
            "title": "Postcode",
            "type": "string"
          }
        }
      },
      "AddressResponse": {
        "title": "AddressResponse",
        "required": [
          "created_at",
          "id",
          "postcode",
          "province"
        ],
        "type": "object",
        "properties": {
          "line1": {
            "title": "Line1",
            "type": "string"
          },
          "line2": {
            "title": "Line2",
            "type": "string"
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "province": {
            "title": "Province",
            "type": "string"
          },
          "postcode": {
            "title": "Postcode",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AddressUpdateRequest": {
        "title": "AddressUpdateRequest",
        "required": [
          "id",
          "postcode",
          "province"
        ],
        "type": "object",
        "properties": {
          "line1": {
            "title": "Line1",
            "type": "string"
          },
          "line2": {
            "title": "Line2",
            "type": "string"
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "province": {
            "title": "Province",
            "type": "string"
          },
          "postcode": {
            "title": "Postcode",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "InputTypeEnum": {
        "title": "InputTypeEnum",
        "type": "integer",
        "description": "An enumeration.",
        "enum": [
          1,
          2,
          3
        ]
      },
      "LocationCreateRequest": {
        "title": "LocationCreateRequest",
        "required": [
          "active",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "integer"
          },
          "postcode": {
            "title": "Postcode",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "string"
          },
          "organization": {
            "title": "Organization",
            "type": "integer"
          },
          "address": {
            "title": "Address",
            "type": "integer"
          }
        }
      },
      "LocationExpandedResponse": {
        "title": "LocationExpandedResponse",
        "required": [
          "active",
          "created_at",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "integer"
          },
          "postcode": {
            "title": "Postcode",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationResponse"
          },
          "address": {
            "$ref": "#/components/schemas/AddressResponse"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LocationResponse": {
        "title": "LocationResponse",
        "required": [
          "active",
          "created_at",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "integer"
          },
          "postcode": {
            "title": "Postcode",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "organization": {
            "title": "Organization",
            "type": "integer"
          },
          "address": {
            "title": "Address",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LocationUpdateRequest": {
        "title": "LocationUpdateRequest",
        "required": [
          "active",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "integer"
          },
          "postcode": {
            "title": "Postcode",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "address": {
            "title": "Address",
            "type": "integer"
          },
          "organization": {
            "title": "Organization",
            "type": "integer"
          }
        }
      },
      "OrganizationCreateRequest": {
        "title": "OrganizationCreateRequest",
        "required": [
          "short_name"
        ],
        "type": "object",
        "properties": {
          "full_name": {
            "title": "Full Name",
            "type": "string"
          },
          "short_name": {
            "title": "Short Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        }
      },
      "OrganizationResponse": {
        "title": "OrganizationResponse",
        "required": [
          "created_at",
          "id",
          "short_name"
        ],
        "type": "object",
        "properties": {
          "full_name": {
            "title": "Full Name",
            "type": "string"
          },
          "short_name": {
            "title": "Short Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrganizationUpdateRequest": {
        "title": "OrganizationUpdateRequest",
        "required": [
          "short_name"
        ],
        "type": "object",
        "properties": {
          "full_name": {
            "title": "Full Name",
            "type": "string"
          },
          "short_name": {
            "title": "Short Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          }
        }
      },
      "RequirementResponse": {
        "title": "RequirementResponse",
        "required": [
          "created_at",
          "description",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RequirementsCreateRequest": {
        "title": "RequirementsCreateRequest",
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "RequirementsUpdateRequest": {
        "title": "RequirementsUpdateRequest",
        "required": [
          "description",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          }
        }
      },
      "VaccineAvailabilityCreateRequest": {
        "title": "VaccineAvailabilityCreateRequest",
        "required": [
          "location"
        ],
        "type": "object",
        "properties": {
          "numberAvailable": {
            "title": "Numberavailable",
            "type": "integer"
          },
          "numberTotal": {
            "title": "Numbertotal",
            "type": "integer"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date"
          },
          "vaccine": {
            "title": "Vaccine",
            "type": "integer"
          },
          "inputType": {
            "$ref": "#/components/schemas/InputTypeEnum"
          },
          "tags": {
            "title": "Tags",
            "type": "string"
          },
          "location": {
            "title": "Location",
            "type": "integer"
          }
        }
      },
      "VaccineAvailabilityExpandedResponse": {
        "title": "VaccineAvailabilityExpandedResponse",
        "required": [
          "created_at",
          "id",
          "location",
          "timeslots"
        ],
        "type": "object",
        "properties": {
          "numberAvailable": {
            "title": "Numberavailable",
            "type": "integer"
          },
          "numberTotal": {
            "title": "Numbertotal",
            "type": "integer"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date"
          },
          "vaccine": {
            "title": "Vaccine",
            "type": "integer"
          },
          "inputType": {
            "$ref": "#/components/schemas/InputTypeEnum"
          },
          "tags": {
            "title": "Tags",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "integer"
              }
            ]
          },
          "location": {
            "$ref": "#/components/schemas/LocationExpandedResponse"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "timeslots": {
            "title": "Timeslots",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VaccineAvailabilityTimeslotResponse"
            }
          }
        }
      },
      "VaccineAvailabilityRequirementsCreateRequest": {
        "title": "VaccineAvailabilityRequirementsCreateRequest",
        "required": [
          "requirements"
        ],
        "type": "object",
        "properties": {
          "requirements": {
            "title": "Requirements",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "VaccineAvailabilityRequirementsResponse": {
        "title": "VaccineAvailabilityRequirementsResponse",
        "required": [
          "active",
          "created_at",
          "id",
          "requirement",
          "vaccine_availability"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "vaccine_availability": {
            "title": "Vaccine Availability",
            "type": "string",
            "format": "uuid"
          },
          "requirement": {
            "title": "Requirement",
            "type": "integer"
          },
          "active": {
            "title": "Active",
            "type": "boolean"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VaccineAvailabilityRequirementsUpdateRequest": {
        "title": "VaccineAvailabilityRequirementsUpdateRequest",
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "title": "Active",
            "type": "boolean"
          }
        }
      },
      "VaccineAvailabilityResponse": {
        "title": "VaccineAvailabilityResponse",
        "required": [
          "created_at",
          "id",
          "location"
        ],
        "type": "object",
        "properties": {
          "numberAvailable": {
            "title": "Numberavailable",
            "type": "integer"
          },
          "numberTotal": {
            "title": "Numbertotal",
            "type": "integer"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date"
          },
          "vaccine": {
            "title": "Vaccine",
            "type": "integer"
          },
          "inputType": {
            "$ref": "#/components/schemas/InputTypeEnum"
          },
          "tags": {
            "title": "Tags",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "location": {
            "title": "Location",
            "type": "integer"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VaccineAvailabilityTimeslotCreateRequest": {
        "title": "VaccineAvailabilityTimeslotCreateRequest",
        "required": [
          "parentID",
          "time"
        ],
        "type": "object",
        "properties": {
          "parentID": {
            "title": "Parentid",
            "type": "string",
            "format": "uuid"
          },
          "time": {
            "title": "Time",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VaccineAvailabilityTimeslotResponse": {
        "title": "VaccineAvailabilityTimeslotResponse",
        "required": [
          "active",
          "created_at",
          "id",
          "time",
          "vaccine_availability"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "vaccine_availability": {
            "title": "Vaccine Availability",
            "type": "string",
            "format": "uuid"
          },
          "active": {
            "title": "Active",
            "type": "boolean"
          },
          "taken_at": {
            "title": "Taken At",
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "title": "Time",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VaccineAvailabilityTimeslotUpdateRequest": {
        "title": "VaccineAvailabilityTimeslotUpdateRequest",
        "type": "object",
        "properties": {
          "taken_at": {
            "title": "Taken At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VaccineAvailabilityUpdateRequest": {
        "title": "VaccineAvailabilityUpdateRequest",
        "required": [
          "id",
          "location"
        ],
        "type": "object",
        "properties": {
          "numberAvailable": {
            "title": "Numberavailable",
            "type": "integer"
          },
          "numberTotal": {
            "title": "Numbertotal",
            "type": "integer"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date"
          },
          "vaccine": {
            "title": "Vaccine",
            "type": "integer"
          },
          "inputType": {
            "$ref": "#/components/schemas/InputTypeEnum"
          },
          "tags": {
            "title": "Tags",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "integer"
              }
            ]
          },
          "location": {
            "title": "Location",
            "type": "integer"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}